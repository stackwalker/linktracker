//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace p1p.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class P1PContext : DbContext
    {
        public P1PContext()
            : base("name=P1PContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<BillingCycle> BillingCycles { get; set; }
        public DbSet<LinkBuildingMode> LinkBuildingModes { get; set; }
        public DbSet<LinkLocation> LinkLocations { get; set; }
        public DbSet<LinkStatus> LinkStatuses { get; set; }
        public DbSet<LinkStrategy> LinkStrategies { get; set; }
        public DbSet<LinkType> LinkTypes { get; set; }
        public DbSet<OutreachAction> OutreachActions { get; set; }
        public DbSet<OutreachType> OutreachTypes { get; set; }
        public DbSet<SiteCategory> SiteCategories { get; set; }
        public DbSet<Team> Teams { get; set; }
        public DbSet<TimeEntry> TimeEntries { get; set; }
        public DbSet<ArticleStatus> ArticleStatuses { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<ProjectArticleXREF> ProjectArticleXREFs { get; set; }
        public DbSet<Article> Articles { get; set; }
        public DbSet<EmployeeTeamXREF> EmployeeTeamXREFs { get; set; }
        public DbSet<OrderEmployeeXREF> OrderEmployeeXREFs { get; set; }
        public DbSet<OrderTeamXREF> OrderTeamXREFs { get; set; }
        public DbSet<Link> Links { get; set; }
        public DbSet<Keyword> Keywords { get; set; }
        public DbSet<LandingPageKeywordXREF> LandingPageKeywordXREFs { get; set; }
        public DbSet<PersonaSocialAccountXREF> PersonaSocialAccountXREFs { get; set; }
        public DbSet<ProjectKeywordXREF> ProjectKeywordXREFs { get; set; }
        public DbSet<ProjectLandingPageXREF> ProjectLandingPageXREFs { get; set; }
        public DbSet<ProjectPersonaXREF> ProjectPersonaXREFs { get; set; }
        public DbSet<ProjectSocialAccountXREF> ProjectSocialAccountXREFs { get; set; }
        public DbSet<SocialAccount> SocialAccounts { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<LandingPage> LandingPages { get; set; }
        public DbSet<OrderCategoryXREF> OrderCategoryXREFs { get; set; }
        public DbSet<Outreach> Outreaches { get; set; }
        public DbSet<Persona> Personas { get; set; }
    
        public virtual ObjectResult<sp_Outreaches_DYNAMIC_SEARCH_Result> sp_Outreaches_DYNAMIC_SEARCH(Nullable<int> linkid, Nullable<int> projectid, Nullable<int> typeid, Nullable<int> actionid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> onlymine, Nullable<int> teamid, string username)
        {
            var linkidParameter = linkid.HasValue ?
                new ObjectParameter("linkid", linkid) :
                new ObjectParameter("linkid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var actionidParameter = actionid.HasValue ?
                new ObjectParameter("actionid", actionid) :
                new ObjectParameter("actionid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Outreaches_DYNAMIC_SEARCH_Result>("sp_Outreaches_DYNAMIC_SEARCH", linkidParameter, projectidParameter, typeidParameter, actionidParameter, startdateParameter, enddateParameter, onlymineParameter, teamidParameter, usernameParameter);
        }
    
        public virtual ObjectResult<sp_TimeEntries_DYNAMIC_SEARCH_Result> sp_TimeEntries_DYNAMIC_SEARCH(string username, Nullable<int> projectid, Nullable<bool> onlymine, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> teamid, string activity)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_TimeEntries_DYNAMIC_SEARCH_Result>("sp_TimeEntries_DYNAMIC_SEARCH", usernameParameter, projectidParameter, onlymineParameter, startdateParameter, enddateParameter, teamidParameter, activityParameter);
        }
    
        public virtual ObjectResult<Outreach> SearchOutreaches(Nullable<int> linkid, Nullable<int> projectid, Nullable<int> typeid, Nullable<int> actionid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> onlymine, Nullable<int> teamid, string username)
        {
            var linkidParameter = linkid.HasValue ?
                new ObjectParameter("linkid", linkid) :
                new ObjectParameter("linkid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var actionidParameter = actionid.HasValue ?
                new ObjectParameter("actionid", actionid) :
                new ObjectParameter("actionid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Outreach>("SearchOutreaches", linkidParameter, projectidParameter, typeidParameter, actionidParameter, startdateParameter, enddateParameter, onlymineParameter, teamidParameter, usernameParameter);
        }
    
        public virtual ObjectResult<Outreach> SearchOutreaches(Nullable<int> linkid, Nullable<int> projectid, Nullable<int> typeid, Nullable<int> actionid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> onlymine, Nullable<int> teamid, string username, MergeOption mergeOption)
        {
            var linkidParameter = linkid.HasValue ?
                new ObjectParameter("linkid", linkid) :
                new ObjectParameter("linkid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var actionidParameter = actionid.HasValue ?
                new ObjectParameter("actionid", actionid) :
                new ObjectParameter("actionid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Outreach>("SearchOutreaches", mergeOption, linkidParameter, projectidParameter, typeidParameter, actionidParameter, startdateParameter, enddateParameter, onlymineParameter, teamidParameter, usernameParameter);
        }
    
        public virtual ObjectResult<TimeEntry> SearchTimeEntries(string username, Nullable<int> projectid, Nullable<bool> onlymine, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> teamid, string activity)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeEntry>("SearchTimeEntries", usernameParameter, projectidParameter, onlymineParameter, startdateParameter, enddateParameter, teamidParameter, activityParameter);
        }
    
        public virtual ObjectResult<TimeEntry> SearchTimeEntries(string username, Nullable<int> projectid, Nullable<bool> onlymine, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> teamid, string activity, MergeOption mergeOption)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TimeEntry>("SearchTimeEntries", mergeOption, usernameParameter, projectidParameter, onlymineParameter, startdateParameter, enddateParameter, teamidParameter, activityParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Links_Aggregates_By_Week(Nullable<int> projectid, Nullable<int> statusid, Nullable<int> linkstrategyid, Nullable<bool> onlymine, string username, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> includeNotInUse, Nullable<int> teamid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            var linkstrategyidParameter = linkstrategyid.HasValue ?
                new ObjectParameter("linkstrategyid", linkstrategyid) :
                new ObjectParameter("linkstrategyid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var includeNotInUseParameter = includeNotInUse.HasValue ?
                new ObjectParameter("includeNotInUse", includeNotInUse) :
                new ObjectParameter("includeNotInUse", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Links_Aggregates_By_Week", projectidParameter, statusidParameter, linkstrategyidParameter, onlymineParameter, usernameParameter, startdateParameter, enddateParameter, includeNotInUseParameter, teamidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LinkAggregateByWeek(Nullable<int> projectid, Nullable<int> statusid, Nullable<int> linkstrategyid, Nullable<bool> onlymine, string username, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> includeNotInUse, Nullable<int> teamid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            var linkstrategyidParameter = linkstrategyid.HasValue ?
                new ObjectParameter("linkstrategyid", linkstrategyid) :
                new ObjectParameter("linkstrategyid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var includeNotInUseParameter = includeNotInUse.HasValue ?
                new ObjectParameter("includeNotInUse", includeNotInUse) :
                new ObjectParameter("includeNotInUse", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LinkAggregateByWeek", projectidParameter, statusidParameter, linkstrategyidParameter, onlymineParameter, usernameParameter, startdateParameter, enddateParameter, includeNotInUseParameter, teamidParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_Outreach_Aggregates_By_Week(Nullable<int> linkid, Nullable<int> projectid, Nullable<int> typeid, Nullable<int> actionid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> onlymine, Nullable<int> teamid, string username)
        {
            var linkidParameter = linkid.HasValue ?
                new ObjectParameter("linkid", linkid) :
                new ObjectParameter("linkid", typeof(int));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var typeidParameter = typeid.HasValue ?
                new ObjectParameter("typeid", typeid) :
                new ObjectParameter("typeid", typeof(int));
    
            var actionidParameter = actionid.HasValue ?
                new ObjectParameter("actionid", actionid) :
                new ObjectParameter("actionid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_Outreach_Aggregates_By_Week", linkidParameter, projectidParameter, typeidParameter, actionidParameter, startdateParameter, enddateParameter, onlymineParameter, teamidParameter, usernameParameter);
        }
    
        public virtual ObjectResult<sp_Hours_Aggregates_By_Activity_Result1> sp_Hours_Aggregates_By_Activity(string username, Nullable<int> projectid, Nullable<bool> onlymine, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> teamid, string activity)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Hours_Aggregates_By_Activity_Result1>("sp_Hours_Aggregates_By_Activity", usernameParameter, projectidParameter, onlymineParameter, startdateParameter, enddateParameter, teamidParameter, activityParameter);
        }
    
        public virtual ObjectResult<sp_Hours_Aggregates_By_Project_Result1> sp_Hours_Aggregates_By_Project(string username, Nullable<int> projectid, Nullable<bool> onlymine, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<int> teamid, string activity)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var activityParameter = activity != null ?
                new ObjectParameter("activity", activity) :
                new ObjectParameter("activity", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Hours_Aggregates_By_Project_Result1>("sp_Hours_Aggregates_By_Project", usernameParameter, projectidParameter, onlymineParameter, startdateParameter, enddateParameter, teamidParameter, activityParameter);
        }
    
        public virtual ObjectResult<sp_Links_Aggregates_Result2> sp_Links_Aggregates(Nullable<int> projectid, Nullable<int> statusid, Nullable<int> linkstrategyid, Nullable<bool> onlymine, string username, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> includeNotInUse, Nullable<int> teamid, Nullable<bool> isactive)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            var linkstrategyidParameter = linkstrategyid.HasValue ?
                new ObjectParameter("linkstrategyid", linkstrategyid) :
                new ObjectParameter("linkstrategyid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var includeNotInUseParameter = includeNotInUse.HasValue ?
                new ObjectParameter("includeNotInUse", includeNotInUse) :
                new ObjectParameter("includeNotInUse", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Links_Aggregates_Result2>("sp_Links_Aggregates", projectidParameter, statusidParameter, linkstrategyidParameter, onlymineParameter, usernameParameter, startdateParameter, enddateParameter, includeNotInUseParameter, teamidParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<Link> SearchLinks(Nullable<int> projectid, Nullable<int> statusid, Nullable<int> linkstrategyid, Nullable<bool> onlymine, string username, Nullable<int> categoryid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> includeNotInUse, Nullable<int> teamid, Nullable<bool> isactive)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            var linkstrategyidParameter = linkstrategyid.HasValue ?
                new ObjectParameter("linkstrategyid", linkstrategyid) :
                new ObjectParameter("linkstrategyid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var includeNotInUseParameter = includeNotInUse.HasValue ?
                new ObjectParameter("includeNotInUse", includeNotInUse) :
                new ObjectParameter("includeNotInUse", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Link>("SearchLinks", projectidParameter, statusidParameter, linkstrategyidParameter, onlymineParameter, usernameParameter, categoryidParameter, startdateParameter, enddateParameter, includeNotInUseParameter, teamidParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<Link> SearchLinks(Nullable<int> projectid, Nullable<int> statusid, Nullable<int> linkstrategyid, Nullable<bool> onlymine, string username, Nullable<int> categoryid, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, Nullable<bool> includeNotInUse, Nullable<int> teamid, Nullable<bool> isactive, MergeOption mergeOption)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var statusidParameter = statusid.HasValue ?
                new ObjectParameter("statusid", statusid) :
                new ObjectParameter("statusid", typeof(int));
    
            var linkstrategyidParameter = linkstrategyid.HasValue ?
                new ObjectParameter("linkstrategyid", linkstrategyid) :
                new ObjectParameter("linkstrategyid", typeof(int));
    
            var onlymineParameter = onlymine.HasValue ?
                new ObjectParameter("onlymine", onlymine) :
                new ObjectParameter("onlymine", typeof(bool));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var categoryidParameter = categoryid.HasValue ?
                new ObjectParameter("categoryid", categoryid) :
                new ObjectParameter("categoryid", typeof(int));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var includeNotInUseParameter = includeNotInUse.HasValue ?
                new ObjectParameter("includeNotInUse", includeNotInUse) :
                new ObjectParameter("includeNotInUse", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            var isactiveParameter = isactive.HasValue ?
                new ObjectParameter("isactive", isactive) :
                new ObjectParameter("isactive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Link>("SearchLinks", mergeOption, projectidParameter, statusidParameter, linkstrategyidParameter, onlymineParameter, usernameParameter, categoryidParameter, startdateParameter, enddateParameter, includeNotInUseParameter, teamidParameter, isactiveParameter);
        }
    
        public virtual ObjectResult<sp_Articles_DYNAMIC_SEARCH_Result3> sp_Articles_DYNAMIC_SEARCH(Nullable<int> projectid, string username, Nullable<bool> includepublished, Nullable<int> teamid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var includepublishedParameter = includepublished.HasValue ?
                new ObjectParameter("includepublished", includepublished) :
                new ObjectParameter("includepublished", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Articles_DYNAMIC_SEARCH_Result3>("sp_Articles_DYNAMIC_SEARCH", projectidParameter, usernameParameter, includepublishedParameter, teamidParameter);
        }
    
        public virtual ObjectResult<Article> SearchArticles(Nullable<int> projectid, string username, Nullable<bool> includepublished, Nullable<int> teamid)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var includepublishedParameter = includepublished.HasValue ?
                new ObjectParameter("includepublished", includepublished) :
                new ObjectParameter("includepublished", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("SearchArticles", projectidParameter, usernameParameter, includepublishedParameter, teamidParameter);
        }
    
        public virtual ObjectResult<Article> SearchArticles(Nullable<int> projectid, string username, Nullable<bool> includepublished, Nullable<int> teamid, MergeOption mergeOption)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var includepublishedParameter = includepublished.HasValue ?
                new ObjectParameter("includepublished", includepublished) :
                new ObjectParameter("includepublished", typeof(bool));
    
            var teamidParameter = teamid.HasValue ?
                new ObjectParameter("teamid", teamid) :
                new ObjectParameter("teamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("SearchArticles", mergeOption, projectidParameter, usernameParameter, includepublishedParameter, teamidParameter);
        }
    }
}
